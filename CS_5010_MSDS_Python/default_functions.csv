,funcname,bod,bod_long
0,abs(x),Return the absolute value of a number,"Return the absolute value of a number.  The argument may be an
integer or a floating point number.  If the argument is a complex number, its
magnitude is returned. If x defines __abs__(),
abs(x) returns x.__abs__()."
1,all(iterable),"Return True if all elements of the iterable are true (or if the iterable
is empty)","Return True if all elements of the iterable are true (or if the iterable
is empty).  Equivalent to:"
2,any(iterable),Return True if any element of the iterable is true,"Return True if any element of the iterable is true.  If the iterable
is empty, return False.  Equivalent to:"
3,ascii(object),"As repr(), return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
repr() using \x, \u or \U escapes","As repr(), return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
repr() using \x, \u or \U escapes.  This generates a string
similar to that returned by repr() in Python 2."
4,bin(x),Convert an integer number to a binary string prefixed with “0b”,"Convert an integer number to a binary string prefixed with “0b”. The result
is a valid Python expression. If x is not a Python int object, it
has to define an __index__() method that returns an integer. Some
examples:"
5,class bool([x]),"Return a Boolean value, i.e","Return a Boolean value, i.e. one of True or False.  x is converted
using the standard truth testing procedure.  If x is false
or omitted, this returns False; otherwise it returns True.  The
bool class is a subclass of int (see Numeric Types — int, float, complex).
It cannot be subclassed further.  Its only instances are False and
True (see Boolean Values)."
6,"breakpoint(*args, **kws)",This function drops you into the debugger at the call site,"This function drops you into the debugger at the call site.  Specifically,
it calls sys.breakpointhook(), passing args and kws straight
through.  By default, sys.breakpointhook() calls
pdb.set_trace() expecting no arguments.  In this case, it is
purely a convenience function so you don’t have to explicitly import
pdb or type as much code to enter the debugger.  However,
sys.breakpointhook() can be set to some other function and
breakpoint() will automatically call that, allowing you to drop into
the debugger of choice."
7,"class bytearray([source[, encoding[, errors]]",Return a new array of bytes,"Return a new array of bytes.  The bytearray class is a mutable
sequence of integers in the range 0 <= x < 256.  It has most of the usual
methods of mutable sequences, described in Mutable Sequence Types, as well
as most methods that the bytes type has, see Bytes and Bytearray Operations."
8,"class bytes([source[, encoding[, errors]]","Return a new “bytes” object, which is an immutable sequence of integers in
the range 0 <= x < 256","Return a new “bytes” object, which is an immutable sequence of integers in
the range 0 <= x < 256.  bytes is an immutable version of
bytearray – it has the same non-mutating methods and the same
indexing and slicing behavior."
9,callable(object),"Return True if the object argument appears callable,
False if not","Return True if the object argument appears callable,
False if not.  If this returns True, it is still possible that a
call fails, but if it is False, calling object will never succeed.
Note that classes are callable (calling a class returns a new instance);
instances are callable if their class has a __call__() method."
10,chr(i),"Return the string representing a character whose Unicode code point is the
integer i","Return the string representing a character whose Unicode code point is the
integer i.  For example, chr(97) returns the string 'a', while
chr(8364) returns the string '€'. This is the inverse of ord()."
11,@classmethod,Transform a method into a class method.,Transform a method into a class method.
12,"compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)",Compile the source into a code or AST object,"Compile the source into a code or AST object.  Code objects can be executed
by exec() or eval().  source can either be a normal string, a
byte string, or an AST object.  Refer to the ast module documentation
for information on how to work with AST objects."
13,"class complex([real[, imag]])","Return a complex number with the value real + imag*1j or convert a string
or number to a complex number","Return a complex number with the value real + imag*1j or convert a string
or number to a complex number.  If the first parameter is a string, it will
be interpreted as a complex number and the function must be called without a
second parameter.  The second parameter can never be a string. Each argument
may be any numeric type (including complex).  If imag is omitted, it
defaults to zero and the constructor serves as a numeric conversion like
int and float.  If both arguments are omitted, returns
0j."
14,"delattr(object, name)",This is a relative of setattr(),"This is a relative of setattr().  The arguments are an object and a
string.  The string must be the name of one of the object’s attributes.  The
function deletes the named attribute, provided the object allows it.  For
example, delattr(x, 'foobar') is equivalent to del x.foobar."
15,class dict(**kwar,Create a new dictionary,"Create a new dictionary.  The dict object is the dictionary class.
See dict and Mapping Types — dict for documentation about this class."
16,dir([object]),"Without arguments, return the list of names in the current local scope","Without arguments, return the list of names in the current local scope.  With an
argument, attempt to return a list of valid attributes for that object."
17,"divmod(a, b)","Take two (non complex) numbers as arguments and return a pair of numbers
consisting of their quotient and remainder when using integer division","Take two (non complex) numbers as arguments and return a pair of numbers
consisting of their quotient and remainder when using integer division.  With
mixed operand types, the rules for binary arithmetic operators apply.  For
integers, the result is the same as (a // b, a % b). For floating point
numbers the result is (q, a % b), where q is usually math.floor(a /
b) but may be 1 less than that.  In any case q * b + a % b is very
close to a, if a % b is non-zero it has the same sign as b, and 0
<= abs(a % b) < abs(b)."
18,"enumerate(iterable, start=0)",Return an enumerate object,"Return an enumerate object. iterable must be a sequence, an
iterator, or some other object which supports iteration.
The __next__() method of the iterator returned by
enumerate() returns a tuple containing a count (from start which
defaults to 0) and the values obtained from iterating over iterable."
19,"eval(expression[, globals[, locals]])",The arguments are a string and optional globals and locals,"The arguments are a string and optional globals and locals.  If provided,
globals must be a dictionary.  If provided, locals can be any mapping
object."
20,"exec(object[, globals[, locals]])",This function supports dynamic execution of Python code,"This function supports dynamic execution of Python code. object must be
either a string or a code object.  If it is a string, the string is parsed as
a suite of Python statements which is then executed (unless a syntax error
occurs). 1 If it is a code object, it is simply executed.  In all cases,
the code that’s executed is expected to be valid as file input (see the
section “File input” in the Reference Manual). Be aware that the
return and yield statements may not be used outside of
function definitions even within the context of code passed to the
exec() function. The return value is None."
21,"filter(function, iterable)","Construct an iterator from those elements of iterable for which function
returns true","Construct an iterator from those elements of iterable for which function
returns true.  iterable may be either a sequence, a container which
supports iteration, or an iterator.  If function is None, the identity
function is assumed, that is, all elements of iterable that are false are
removed."
22,class float([x]),Return a floating point number constructed from a number or string x.,Return a floating point number constructed from a number or string x.
23,"format(value[, format_spec])","Convert a value to a “formatted” representation, as controlled by
format_spec","Convert a value to a “formatted” representation, as controlled by
format_spec.  The interpretation of format_spec will depend on the type
of the value argument, however there is a standard formatting syntax that
is used by most built-in types: Format Specification Mini-Language."
24,class frozenset([iterable,"Return a new frozenset object, optionally with elements taken from
iterable","Return a new frozenset object, optionally with elements taken from
iterable.  frozenset is a built-in class.  See frozenset and
Set Types — set, frozenset for documentation about this class."
25,"getattr(object, name[, default])",Return the value of the named attribute of object,"Return the value of the named attribute of object.  name must be a string.
If the string is the name of one of the object’s attributes, the result is the
value of that attribute.  For example, getattr(x, 'foobar') is equivalent to
x.foobar.  If the named attribute does not exist, default is returned if
provided, otherwise AttributeError is raised."
26,globals(),Return a dictionary representing the current global symbol table,"Return a dictionary representing the current global symbol table. This is always
the dictionary of the current module (inside a function or method, this is the
module where it is defined, not the module from which it is called)."
27,"hasattr(object, name)",The arguments are an object and a string,"The arguments are an object and a string.  The result is True if the
string is the name of one of the object’s attributes, False if not. (This
is implemented by calling getattr(object, name) and seeing whether it
raises an AttributeError or not.)"
28,hash(object),Return the hash value of the object (if it has one),"Return the hash value of the object (if it has one).  Hash values are
integers.  They are used to quickly compare dictionary keys during a
dictionary lookup.  Numeric values that compare equal have the same hash
value (even if they are of different types, as is the case for 1 and 1.0)."
29,help([object]),Invoke the built-in help system,"Invoke the built-in help system.  (This function is intended for interactive
use.)  If no argument is given, the interactive help system starts on the
interpreter console.  If the argument is a string, then the string is looked up
as the name of a module, function, class, method, keyword, or documentation
topic, and a help page is printed on the console.  If the argument is any other
kind of object, a help page on the object is generated."
30,hex(x),"Convert an integer number to a lowercase hexadecimal string prefixed with
“0x”","Convert an integer number to a lowercase hexadecimal string prefixed with
“0x”. If x is not a Python int object, it has to define an
__index__() method that returns an integer. Some examples:"
31,id(object),Return the “identity” of an object,"Return the “identity” of an object.  This is an integer which
is guaranteed to be unique and constant for this object during its lifetime.
Two objects with non-overlapping lifetimes may have the same id()
value."
32,input([prompt]),"If the prompt argument is present, it is written to standard output without
a trailing newline","If the prompt argument is present, it is written to standard output without
a trailing newline.  The function then reads a line from input, converts it
to a string (stripping a trailing newline), and returns that.  When EOF is
read, EOFError is raised.  Example:"
33,class int([x]),"Return an integer object constructed from a number or string x, or return
0 if no arguments are given","Return an integer object constructed from a number or string x, or return
0 if no arguments are given.  If x defines __int__(),
int(x) returns x.__int__().  If x defines __index__(),
it returns x.__index__().  If x defines __trunc__(),
it returns x.__trunc__().
For floating point numbers, this truncates towards zero."
34,"isinstance(object, classinfo)","Return True if the object argument is an instance of the classinfo
argument, or of a (direct, indirect or virtual) subclass thereof","Return True if the object argument is an instance of the classinfo
argument, or of a (direct, indirect or virtual) subclass thereof.  If object is not
an object of the given type, the function always returns False.
If classinfo is a tuple of type objects (or recursively, other such
tuples), return True if object is an instance of any of the types.
If classinfo is not a type or tuple of types and such tuples,
a TypeError exception is raised."
35,"issubclass(class, classinfo)","Return True if class is a subclass (direct, indirect or virtual) of classinfo","Return True if class is a subclass (direct, indirect or virtual) of classinfo.  A
class is considered a subclass of itself. classinfo may be a tuple of class
objects, in which case every entry in classinfo will be checked. In any other
case, a TypeError exception is raised."
36,"iter(object[, sentinel])",Return an iterator object,"Return an iterator object.  The first argument is interpreted very
differently depending on the presence of the second argument. Without a
second argument, object must be a collection object which supports the
iteration protocol (the __iter__() method), or it must support the
sequence protocol (the __getitem__() method with integer arguments
starting at 0).  If it does not support either of those protocols,
TypeError is raised. If the second argument, sentinel, is given,
then object must be a callable object.  The iterator created in this case
will call object with no arguments for each call to its
__next__() method; if the value returned is equal to
sentinel, StopIteration will be raised, otherwise the value will
be returned."
37,len(s),Return the length (the number of items) of an object,"Return the length (the number of items) of an object.  The argument may be a
sequence (such as a string, bytes, tuple, list, or range) or a collection
(such as a dictionary, set, or frozen set)."
38,class list([iterable,"Rather than being a function, list is actually a mutable
sequence type, as documented in Lists and Sequence Types — list, tuple, range.","Rather than being a function, list is actually a mutable
sequence type, as documented in Lists and Sequence Types — list, tuple, range."
39,locals(),"Update and return a dictionary representing the current local symbol table.
Free variables are returned by locals() when it is called in function
blocks, but not in class blocks","Update and return a dictionary representing the current local symbol table.
Free variables are returned by locals() when it is called in function
blocks, but not in class blocks. Note that at the module level, locals()
and globals() are the same dictionary."
40,"map(function, iterable, ...)","Return an iterator that applies function to every item of iterable,
yielding the results","Return an iterator that applies function to every item of iterable,
yielding the results.  If additional iterable arguments are passed,
function must take that many arguments and is applied to the items from all
iterables in parallel.  With multiple iterables, the iterator stops when the
shortest iterable is exhausted.  For cases where the function inputs are
already arranged into argument tuples, see itertools.starmap()."
41,"max(iterable, *[, key, default])","Return the largest item in an iterable or the largest of two or more
arguments.","Return the largest item in an iterable or the largest of two or more
arguments."
42,class memoryview(ob,Return a “memory view” object created from the given argument,"Return a “memory view” object created from the given argument.  See
Memory Views for more information."
43,"min(iterable, *[, key, default])","Return the smallest item in an iterable or the smallest of two or more
arguments.","Return the smallest item in an iterable or the smallest of two or more
arguments."
44,"next(iterator[, default])","Retrieve the next item from the iterator by calling its
__next__() method","Retrieve the next item from the iterator by calling its
__next__() method.  If default is given, it is returned
if the iterator is exhausted, otherwise StopIteration is raised."
45,class object,Return a new featureless object,"Return a new featureless object.  object is a base for all classes.
It has the methods that are common to all instances of Python classes.  This
function does not accept any arguments."
46,oct(x),Convert an integer number to an octal string prefixed with “0o”,"Convert an integer number to an octal string prefixed with “0o”.  The result
is a valid Python expression. If x is not a Python int object, it
has to define an __index__() method that returns an integer. For
example:"
47,"open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)",Open file and return a corresponding file object,"Open file and return a corresponding file object.  If the file
cannot be opened, an OSError is raised."
48,ord(c),"Given a string representing one Unicode character, return an integer
representing the Unicode code point of that character","Given a string representing one Unicode character, return an integer
representing the Unicode code point of that character.  For example,
ord('a') returns the integer 97 and ord('€') (Euro sign)
returns 8364.  This is the inverse of chr()."
49,"pow(base, exp[, mod])","Return base to the power exp; if mod is present, return base to the
power exp, modulo mod (computed more efficiently than
pow(base, exp) % mod)","Return base to the power exp; if mod is present, return base to the
power exp, modulo mod (computed more efficiently than
pow(base, exp) % mod). The two-argument form pow(base, exp) is
equivalent to using the power operator: base**exp."
50,"print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)","Print objects to the text stream file, separated by sep and followed
by end","Print objects to the text stream file, separated by sep and followed
by end.  sep, end, file and flush, if present, must be given as keyword
arguments."
51,"class property(fget=None, fset=None, fdel=None, doc=None)",Return a property attribute.,Return a property attribute.
52,class range(sto,"Rather than being a function, range is actually an immutable
sequence type, as documented in Ranges and Sequence Types — list, tuple, range.","Rather than being a function, range is actually an immutable
sequence type, as documented in Ranges and Sequence Types — list, tuple, range."
53,repr(object),Return a string containing a printable representation of an object,"Return a string containing a printable representation of an object.  For many
types, this function makes an attempt to return a string that would yield an
object with the same value when passed to eval(), otherwise the
representation is a string enclosed in angle brackets that contains the name
of the type of the object together with additional information often
including the name and address of the object.  A class can control what this
function returns for its instances by defining a __repr__() method."
54,reversed(seq),Return a reverse iterator,"Return a reverse iterator.  seq must be an object which has
a __reversed__() method or supports the sequence protocol (the
__len__() method and the __getitem__() method with integer
arguments starting at 0)."
55,"round(number[, ndigits])","Return number rounded to ndigits precision after the decimal
point","Return number rounded to ndigits precision after the decimal
point.  If ndigits is omitted or is None, it returns the
nearest integer to its input."
56,class set([iterable,"Return a new set object, optionally with elements taken from
iterable","Return a new set object, optionally with elements taken from
iterable.  set is a built-in class.  See set and
Set Types — set, frozenset for documentation about this class."
57,"setattr(object, name, value)",This is the counterpart of getattr(),"This is the counterpart of getattr().  The arguments are an object, a
string and an arbitrary value.  The string may name an existing attribute or a
new attribute.  The function assigns the value to the attribute, provided the
object allows it.  For example, setattr(x, 'foobar', 123) is equivalent to
x.foobar = 123."
58,class slice(stop),"Return a slice object representing the set of indices specified by
range(start, stop, step)","Return a slice object representing the set of indices specified by
range(start, stop, step).  The start and step arguments default to
None.  Slice objects have read-only data attributes start,
stop and step which merely return the argument
values (or their default).  They have no other explicit functionality;
however they are used by Numerical Python and other third party extensions.
Slice objects are also generated when extended indexing syntax is used.  For
example: a[start:stop:step] or a[start:stop, i].  See
itertools.islice() for an alternate version that returns an iterator."
59,"sorted(iterable, *, key=None, reverse=False)",Return a new sorted list from the items in iterable.,Return a new sorted list from the items in iterable.
60,@staticmethod,Transform a method into a static method.,Transform a method into a static method.
61,class str(object=',Return a str version of object,Return a str version of object.  See str() for details.
62,"sum(iterable, /, start=0)","Sums start and the items of an iterable from left to right and returns the
total","Sums start and the items of an iterable from left to right and returns the
total.  The iterable’s items are normally numbers, and the start value is not
allowed to be a string."
63,"super([type[, object-or-type]])","Return a proxy object that delegates method calls to a parent or sibling
class of type","Return a proxy object that delegates method calls to a parent or sibling
class of type.  This is useful for accessing inherited methods that have
been overridden in a class."
64,class tuple([iterable,"Rather than being a function, tuple is actually an immutable
sequence type, as documented in Tuples and Sequence Types — list, tuple, range.","Rather than being a function, tuple is actually an immutable
sequence type, as documented in Tuples and Sequence Types — list, tuple, range."
65,class type(object),"With one argument, return the type of an object","With one argument, return the type of an object.  The return value is a
type object and generally the same object as returned by
object.__class__."
66,vars([object]),"Return the __dict__ attribute for a module, class, instance,
or any other object with a __dict__ attribute.","Return the __dict__ attribute for a module, class, instance,
or any other object with a __dict__ attribute."
67,zip(*iterables),Make an iterator that aggregates elements from each of the iterables.,Make an iterator that aggregates elements from each of the iterables.
68,"__import__(name, globals=None, locals=None, fromlist=(), level=0)",Note,Note
69,,"Note that the parser only accepts the Unix-style end of line convention.
If you are reading the code from a file, make sure to use newline conversion
mode to convert Windows or Mac-style newlines.","Note that the parser only accepts the Unix-style end of line convention.
If you are reading the code from a file, make sure to use newline conversion
mode to convert Windows or Mac-style newlines."
