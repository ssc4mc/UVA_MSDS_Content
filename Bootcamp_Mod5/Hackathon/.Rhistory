A = matrix(c(1, 1, 1, 3, 2, 1, 2, 1, 2), 3, 3)
A
A = matrix(c(1,3,2,1,2,1,1,1,2), 3, 3)
A
s = matrix(c(15, 28, 23), 1)
s
s = matrix(c(15, 28, 23), 3,1 )
s
showEqn(A,s)
library(matlib)
install.packages("matlib")
showEqn(A,s)
library(matlib)
R.version()
R.version
updateR()
install.packages("installr")
library(installr)
updateR()
A = matrix(c(1,3,2,1,2,1,1,1,2), 3, 3)
s = matrix(c(15, 28, 23), 3,1 )
library(matlib)
install.packages("matlib")
library(matlib)
showEqn(A, s)
c( R(A), R(cbind(A,s))
)
plotEqn(A,s)
plotEqn3d(A,s)
Solve(A,s, fractions = TRUE)
rref(A)
install.packages("pracma")
rref(A)
library(pracma)
rref(A)
A = matrix(c(1,0,2,3/2,1,8,1/2,1,13), 3, 3)
s = matrix(c(9/4,-1/2,2), 3,1 )
Solve(A,s, fractions = TRUE)
A = matrix(c(1,3,2,1,2,1,1,1,2), 3, 3)
det(A)
AI <- inv(A)
AI
AI %*% A
zapsmall(AI %*% A)
A
B = matrix(c(1,1,1,1,2,1,3,4,2), 3, 3)
B
BI <- inv(B)
BI
C = matrix(c(1,0,2,3/2,1,8,1/2,1,13), 3, 3)
t = matrix(c(9/4, -1/2, 2))
Solve(C,t, fractions = TRUE)
A = matrix(c(1,1,2,1,2,3,3,4,7), 3, 3)
s = matrix(c(12,17,29), 3,1 )
Solve(A,s, fractions = TRUE)
library(matlib)
A = matrix(c(1,1,2,1,2,3,3,4,7), 3, 3)
s = matrix(c(12,17,29), 3,1 )
Solve(A,s, fractions = TRUE)
A
s
Solve(A,s, fractions = TRUE)
library(pracma)
rref(A)
A = matrix(c(1,4,2,0,3,1), 2, 3)
B = matrix(c(1,0,1,1,1,0,0,1,1), 3,3 )
A
B
A %% B
A %*% B
C = matrix(c(2,3,5,6),1,4)
C
D = matrix(c(1,3,2,1),4,1)
D
C %*% D
C = matrix(c(2,4,5,6),1,4)
C %*% D
D %*% C
G = matrix(c(2,0,1,-1,3,0), 3,2)
G
H = matrix(c(0,-2,1,0,4,0,-1,2), 2, 4)
H
G %*% H
X = matrix(c(1,1,3,5,7,3,2,4,5,6,2,76,5,4,5), 3, 5)
X
X = matrix(c(1,1,3,5,7,3,2,4,5,6,2,76,5,4,5), 5, 3)
X = matrix(c(1,1,3,5,7,3,2,4,5,6,2,76,5,4,5), 5, 3)
x
X
Y = matrix(c(5,5,3,3,5,6,3,3,5,6,4,3,4,5,6,7,4,3,4,5,6), 3, 7)
Y
Z = matrix(c(3,3,3,3,54,5,5,5,5,2,2,2,3,4,5,6,7,4,3,1,4,3,2,3,4,5,6,7), 7, 4)
X %*% Y %*% Z
G = matrix(c(1,0,0,1), 2,2)
H = matrxi(c(1,4,2,5,3,6),2,3)
H = matrix(c(1,4,2,5,3,6),2,3)
G %*% H
shat = matrix(c(4/13, -3/13, -12/13), 3, 1)
shat
r = matrix(c(6,2,3), 3, 1)
r
A = matrix(c(1/3, 0, 0, -1/4, 0, 0), 2, 3)
A
A %*% shat
A %*% r
r %*% A
R = matrix(c(5,4,9,-1,-4,3,-3,1,0,7,-2,12), 3, 4)
R
det(shat)
t(shat)
diag(shat)
R<-eigen(A)
A %*% R
A = matrix(c(6, 0, 0, 2, 1/3, -1/4), 2, 3)
A
A %*% r
A = matrix(c(1, 0, 0, 1, 1/3, -1/4), 2, 3)
A %*% r
A %*% R
bear = matrix(c(3,1,1,1), 2, 2)
library(matlib)
det(A)
det(bear)
AI <- inv(bear)
AI
AI %*% bear
myvec = matrix(c(5,2),2,1)
myvec
AI %*% myvec
bearvec = matrix(c(3/2, 1/2), 2,1)
AI %*% bearvec
bear = matrix(c(3,1,1,1),2,2)
cc45 = matrix(c(1/sqrt(2), 1/sqrt(2), -1/sqrt(2), 1/sqrt(2)), 2,2)
det(bear)
BI = inv(bear)
BI
transbear = BI %*% cc45
transbear
Rbear = transbear %*% bear
Rbear
Rbear = inv(bear) %*% cc45 %*% bear
Rbear
A = matrix(c(3,-1,-1,1), 2, 2)
A = A %*% (1/2)
A = (1/2) * A
A
B = matrix(c(2,4,0,2),2,2)
B = (1/sqrt(2)) * B
B
AB = A %*% B
AB
1/sqrt(2)
H
Y
X
X[1:9]
C
B
t(B)
B %*% t(B)
t(B) %*% BN
t(B) %*% B
inv(B)
inv(B) %*% B
install.packages("Hmisc")
data <- data %>% drop_na(dateRep)
library(utils)
library(dplyr)
library(tidyr)
library(lubridate)
library(Hmisc)
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
data[[1]] <- as.Date(data[[1]], "%d/%m/%Y")
data <- select(data, dateRep, countriesAndTerritories, cases, popData2019)
data <- data %>% drop_na(dateRep)
data <- data %>% filter(dateRep >= "2020-01-22" & dateRep <= "2020-07-01")
data <- data %>% arrange(countriesAndTerritories,dateRep)
data <- data %>% group_by(countriesAndTerritories) %>% mutate(cum_cases = cumsum(cases))
head(data %>% filter(countriesAndTerritories == "China"))
install.packages("dplyr")
install.packages("tidyr")
install.packages("lubridate")
library(utils)
library(dplyr)
library(tidyr)
library(lubridate)
library(Hmisc)
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
data[[1]] <- as.Date(data[[1]], "%d/%m/%Y")
data <- select(data, dateRep, countriesAndTerritories, cases, popData2019)
data <- data %>% drop_na(dateRep)
data <- data %>% filter(dateRep >= "2020-01-22" & dateRep <= "2020-07-01")
data <- data %>% arrange(countriesAndTerritories,dateRep)
data <- data %>% group_by(countriesAndTerritories) %>% mutate(cum_cases = cumsum(cases))
head(data %>% filter(countriesAndTerritories == "China"))
datag <- data %>% group_by(dateRep)
datag <- datag %>% summarise(cases = sum(cases), cum_cases = sum(cum_cases))
datag$popData2019 <- 7669215953
datag$countriesAndTerritories <- 'World'
datag <- datag[names(data)]
describe(datag)
describe(data)
library(utils)
library(dplyr)
library(tidyr)
library(lubridate)
library(Hmisc)
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
data[[1]] <- as.Date(data[[1]], "%d/%m/%Y")
##
data <- select(data, dateRep, countriesAndTerritories, cases, popData2019)
data <- data %>% drop_na(dateRep)
data <- data %>% filter(dateRep >= "2020-01-22" & dateRep <= "2020-07-01")
##
data <- data %>% arrange(countriesAndTerritories,dateRep)
data <- data %>% group_by(countriesAndTerritories) %>% mutate(cum_cases = cumsum(cases))
head(data %>% filter(countriesAndTerritories == "China"))
##
datag <- data %>% group_by(dateRep)
datag <- datag %>% summarise(cases = sum(cases), cum_cases = sum(cum_cases))
datag$popData2019 <- 7669215953
datag$countriesAndTerritories <- 'World'
datag <- datag[names(data)]
describe(datag)
dtogether <- bind_rows(datag, data)
head(dtogether)
dtogether$casesPerMillion <- with(dtogether, cum_cases / (popData2019 / 1000000))
countrylist <- c('United_States_of_America', 'United_Kingdom', 'South_Korea', 'China', 'World')
dtogether <- dtogether %>% filter(countriesAndTerritories %in% countrylist)
head(dtogether)
library(ggplot2)
library(scales)
theme_set(theme_minimal())
ggplot(data=dtogether, aes(x=dateRep, y=casesPerMillion)) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_line(aes(color = countriesAndTerritories, linetype = countriesAndTerritories))
theme_set(theme_minimal())
ggplot(data=dtogether, aes(x=dateRep, y=casesPerMillion)) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
geom_line(aes(color = countriesAndTerritories)) #, linetype = countriesAndTerritories))
install.packages("tidyverse")
setwd("~/")
setwd("D:/Git/COVID-Analysis")
echo $SHELL
